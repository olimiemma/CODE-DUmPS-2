#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Dec 22 18:33:30 2024

@author: legend
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import random
import numpy as np
import matplotlib.pyplot as plt

def get_data(data_tuple):
    """
    Extract numbers, words, and statistics from a tuple of (number, string) pairs.
    
    Args:
        data_tuple: Tuple of (number, string) pairs
        
    Returns:
        tuple: (minimum number, maximum number, count of unique words)
    """
    nums = tuple(t[0] for t in data_tuple)
    words = tuple(set(t[1] for t in data_tuple))
    
    return (min(nums), max(nums), len(words))

def r_squared(measured, estimated):
    """Calculate R-squared value between measured and estimated data."""
    sum_squares = sum((measured[i] - estimated[i])**2 
                     for i in range(len(measured)))
    mean = sum(measured)/len(measured)
    var = sum((x - mean)**2 for x in measured)
    return 1 - sum_squares/var

class TemperatureData:
    """Store and process temperature data for a specific date."""
    
    def __init__(self, data_string):
        """
        Initialize temperature data from comma-separated string.
        
        Args:
            data_string: String containing temperature info in CSV format
        """
        info = data_string.split(',')
        self.high = float(info[1])
        self.year = int(info[2][0:4])
    
    def get_high(self):
        """Return high temperature."""
        return self.high
    
    def get_year(self):
        """Return year."""
        return self.year

def get_temp_data(filename):
    """
    Read temperature data from file.
    
    Args:
        filename: Path to temperature CSV file
        
    Returns:
        list: List of TemperatureData objects
    """
    data = []
    with open(filename) as inFile:
        for line in inFile:
            data.append(TemperatureData(line))
    return data

def get_yearly_means(data):
    """
    Calculate mean high temperature for each year.
    
    Args:
        data: List of TemperatureData objects
        
    Returns:
        dict: Year -> mean temperature mapping
    """
    years = {}
    for d in data:
        year = d.get_year()
        if year in years:
            years[year].append(d.get_high())
        else:
            years[year] = [d.get_high()]
    
    return {year: sum(temps)/len(temps) 
            for year, temps in years.items()}

def split_data(x_vals, y_vals):
    """
    Split data into random training and test sets.
    
    Args:
        x_vals: List of x values
        y_vals: List of y values
        
    Returns:
        tuple: (train_x, train_y, test_x, test_y)
    """
    to_train = random.sample(range(len(x_vals)), len(x_vals)//2)
    train_x, train_y, test_x, test_y = [], [], [], []
    
    for i in range(len(x_vals)):
        if i in to_train:
            train_x.append(x_vals[i])
            train_y.append(y_vals[i])
        else:
            test_x.append(x_vals[i])
            test_y.append(y_vals[i])
    
    return train_x, train_y, test_x, test_y

def analyze_temperature_trends(filename, num_trials=10, dimensions=(1, 2, 3, 4)):
    """
    Analyze temperature trends using polynomial regression.
    
    Args:
        filename: Path to temperature data file
        num_trials: Number of trials for cross-validation
        dimensions: Tuple of polynomial degrees to try
    """
    # Load and process data
    data = get_temp_data(filename)
    yearly_means = get_yearly_means(data)
    
    x_vals = list(yearly_means.keys())
    y_vals = list(yearly_means.values())
    
    # Plot the data
    plt.figure(figsize=(10, 6))
    plt.plot(x_vals, y_vals)
    plt.xlabel('Year')
    plt.ylabel('Mean Daily High (Â°C)')
    plt.title('Temperature Trends in Select U.S. Cities')
    
    # Analyze different polynomial fits
    r_squares = {d: [] for d in dimensions}
    
    for _ in range(num_trials):
        train_x, train_y, test_x, test_y = split_data(x_vals, y_vals)
        
        for d in dimensions:
            model = np.polyfit(train_x, train_y, d)
            est_y_vals = np.polyval(model, test_x)
            r_squares[d].append(r_squared(test_y, est_y_vals))
    
    # Print results
    print('\nMean R-squares for test data:')
    for d in dimensions:
        mean = round(np.mean(r_squares[d]), 4)
        std = round(np.std(r_squares[d]), 4)
        print(f'Dimension {d}: mean = {mean}, std = {std}')

if __name__ == "__main__":
    # Example usage of get_data with the girls_through_life data
    girls_through_life = (
        (1998, "Diana"), (2001, "Babra"), (2003, "Kamara"),
        (2004, "Martha"), (2005, "Florence"), (2006, "Macn"),
        (2009, "Gloria"), (2010, "Dorothy"), (2011, "Bainca"),
        (2011, "Shiella"), (2012, "mes"), (2012, "lia"),
        (2013, "Jahn"), (2013, "Carol"), (2014, "shiella"),
        (2015, "some D b"), (2016, "Rwandese"), (2018, "Mildred"),
        (2020, "Carol"), (2021, "ham"), (2021, "saf"), (2021, "Ni")
    )
    
    min_year, max_year, num_girls = get_data(girls_through_life)
    print(f"From {min_year} to {max_year}, {num_girls} unique names were recorded")
    
    # To analyze temperature data, uncomment and provide filename:
    # analyze_temperature_trends('temperatures.csv')